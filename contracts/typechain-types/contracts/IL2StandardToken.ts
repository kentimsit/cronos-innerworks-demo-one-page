/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IL2StandardTokenInterface extends Interface {
  getFunction(
    nameOrSignature: "bridgeBurn" | "bridgeMint" | "l1Address" | "l2Bridge"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BridgeBurn" | "BridgeInitialize" | "BridgeMint"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bridgeBurn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "l1Address", values?: undefined): string;
  encodeFunctionData(functionFragment: "l2Bridge", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bridgeBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l1Address", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l2Bridge", data: BytesLike): Result;
}

export namespace BridgeBurnEvent {
  export type InputTuple = [_account: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_account: string, _amount: bigint];
  export interface OutputObject {
    _account: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeInitializeEvent {
  export type InputTuple = [
    l1Token: AddressLike,
    name: string,
    symbol: string,
    decimals: BigNumberish
  ];
  export type OutputTuple = [
    l1Token: string,
    name: string,
    symbol: string,
    decimals: bigint
  ];
  export interface OutputObject {
    l1Token: string;
    name: string;
    symbol: string;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeMintEvent {
  export type InputTuple = [_account: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_account: string, _amount: bigint];
  export interface OutputObject {
    _account: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IL2StandardToken extends BaseContract {
  connect(runner?: ContractRunner | null): IL2StandardToken;
  waitForDeployment(): Promise<this>;

  interface: IL2StandardTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bridgeBurn: TypedContractMethod<
    [_account: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  bridgeMint: TypedContractMethod<
    [_account: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  l1Address: TypedContractMethod<[], [string], "view">;

  l2Bridge: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bridgeBurn"
  ): TypedContractMethod<
    [_account: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bridgeMint"
  ): TypedContractMethod<
    [_account: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "l1Address"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "l2Bridge"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BridgeBurn"
  ): TypedContractEvent<
    BridgeBurnEvent.InputTuple,
    BridgeBurnEvent.OutputTuple,
    BridgeBurnEvent.OutputObject
  >;
  getEvent(
    key: "BridgeInitialize"
  ): TypedContractEvent<
    BridgeInitializeEvent.InputTuple,
    BridgeInitializeEvent.OutputTuple,
    BridgeInitializeEvent.OutputObject
  >;
  getEvent(
    key: "BridgeMint"
  ): TypedContractEvent<
    BridgeMintEvent.InputTuple,
    BridgeMintEvent.OutputTuple,
    BridgeMintEvent.OutputObject
  >;

  filters: {
    "BridgeBurn(address,uint256)": TypedContractEvent<
      BridgeBurnEvent.InputTuple,
      BridgeBurnEvent.OutputTuple,
      BridgeBurnEvent.OutputObject
    >;
    BridgeBurn: TypedContractEvent<
      BridgeBurnEvent.InputTuple,
      BridgeBurnEvent.OutputTuple,
      BridgeBurnEvent.OutputObject
    >;

    "BridgeInitialize(address,string,string,uint8)": TypedContractEvent<
      BridgeInitializeEvent.InputTuple,
      BridgeInitializeEvent.OutputTuple,
      BridgeInitializeEvent.OutputObject
    >;
    BridgeInitialize: TypedContractEvent<
      BridgeInitializeEvent.InputTuple,
      BridgeInitializeEvent.OutputTuple,
      BridgeInitializeEvent.OutputObject
    >;

    "BridgeMint(address,uint256)": TypedContractEvent<
      BridgeMintEvent.InputTuple,
      BridgeMintEvent.OutputTuple,
      BridgeMintEvent.OutputObject
    >;
    BridgeMint: TypedContractEvent<
      BridgeMintEvent.InputTuple,
      BridgeMintEvent.OutputTuple,
      BridgeMintEvent.OutputObject
    >;
  };
}
